'use strict'
/*

let x = 1;
//Унарным называется оператор, который применяется к одному операнду. Например, оператор унарный минус "-" меняет знак числа на противоположный:
x = -x;
alert( x ); // -1, применили унарный минус


let x = 1, y = 3;
//Бинарным называется оператор, который применяется к двум операндам. Тот же минус существует и в бинарной форме:
alert( y - x ); // 2, бинарный минус вычитает значения

*/

// Сложение +,
// Вычитание -,
// Умножение *,
// Деление /,
// Взятие остатка от деления %,
// Возведение в степень **.


//Сложение строк при помощи бинарного +
let s = "моя" + "строка";
alert(s); // моястрока

//если хотя бы один операнд является строкой, то второй будет также преобразован в строку. не важно первый или второй
alert( '1' + 2 ); // "12"
alert( 2 + '1' ); // "21"



// Унарный "+"" преобразует не числа в числа
alert( +true ); // 1
alert( +"" );   // 0


//Сокращенная арифметика
let n = 2;
n += 5; // теперь n = 7 (работает как n = n + 5)
n *= 2; // теперь n = 14 (работает как n = n * 2)

alert( n ); // 14



//Инкремент(++)/Декремент(--)
let counter = 2;
counter++;        // работает как counter = counter + 1, просто запись короче
alert( counter ); // 3


//Если результат оператора не используется, а нужно только увеличить/уменьшить переменную, тогда без разницы, какую форму использовать:
let counter = 0;
counter++;
++counter;
alert( counter ); // 2, обе строки сделали одно и то же


//Если хочется тут же использовать результат, то нужна префиксная форма:
let counter = 0;
alert( ++counter ); // 1

//Если нужно увеличить и при этом получить значение переменной до увеличения – нужна постфиксная форма:
let counter = 0;
alert( counter++ ); // 0