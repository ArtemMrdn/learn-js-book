// number для любых чисел: целочисленных или чисел с плавающей точкой; целочисленные значения ограничены диапазоном ±(253-1).
// bigint для целых чисел произвольной длины.
// string для строк. Строка может содержать ноль или больше символов, нет отдельного символьного типа.
// boolean для true/false.
// null для неизвестных значений – отдельный тип, имеющий одно значение null.
// undefined для неприсвоенных значений – отдельный тип, имеющий одно значение undefined.
// object для более сложных структур данных.
// symbol для уникальных идентификаторов.




                                                                 //number
let n = 123;
n = 12.345;

//infinity and NaN

alert(1/0);                           //представляет собой математическую бесконечность ∞
alert(Infinity); 


alert('число'/3);                     //NaN означает вычислительную ошибку
 


                                                                  //BigInt


const bigInt = 4512511252112521521521521n; //символ "n" в конце означает, что это BigInt



                                                                      //string


// let str = "Привет1";        //двойные и одинарное это одно и тоже, в них нету разницы
// let str2 = 'Привет2';
let phrase = `Привет3 ${1+2}`; /*Они позволяют нам встраивать выражения в строку, заключая их в ${…}, выражение внутри вычисляется, и его результат
                               становится частью строки мы можем положить туда все, что угодно.Другие кавычки не имеют такой функциональности встраивания!*/
alert(phrase)


                                                                      //boolean

let isGreater = 4>1  //tакой тип, как правило, используется для хранения значений да/нет: true значит «да, правильно», а false значит «нет, не правильно».
alert(isGreater) 


                                                                      //null

let age = null;        //Это просто специальное значение, которое представляет собой «ничего», «пусто» или «значение неизвестно».В приведённом выше коде указано, что значение переменной age неизвестно.


                                                                      //undefined
let age;

alert(age); // выведет "undefined".  Оно означает, что «значение не было присвоено».                       


                                                                      //object более детально в следующих курсах



                                                                      //typeof

//Оператор typeof возвращает тип аргумента.
 typeof undefined // "undefined"                      

 typeof 0 // "number"
 
 typeof 10n // "bigint"
 
 typeof true // "boolean"
 
 typeof "foo" // "string"
 
 typeof Symbol("id") // "symbol"
 
 typeof Math // "object"  (1)       
 
 typeof null // "object"  (2)                        //Это официально признанная ошибка в typeof, ведущая начало с времён создания JavaScript 
 
 typeof alert // "function"  (3)                         