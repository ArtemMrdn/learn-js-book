//Опциональная цепочка ?.    Останавливает вычисление и возвращает undefined, если часть перед ?. будет иметь значение undefined или null. Например:

let user = {}   //Пользователь без адреса
alert(user?.adress?.street);  //итог Undefined (без ошибки)


//Чтения адреса также может выполняться без ошибок даже если пользователя user не существует: 
let user = null;
alert(user?.adress.street); // итог Undefined. В этом примере конструкция user?. допускает, что в переменной user может быть null/undefined. 

//ВАЖНО если переменная перед ?. не обьявлена то итогом будет ошибка.


//Сокращенное вычисление с помощью ?. Как написано выше ?. останавливает любое вычисление если левая часть не сущетсвует:

let user = null;
let x = 0;

user?.sayHi(x++); // Вычисление 'x++' не будет выполненно т.к. user не был найден

alert(x)   // 0, так как вычисление не было воспроизведено



//Варианты применения ?.(), ?.[]. Они могут быть использованы для вызова несуществующей функции.
//?.()
let user1 = {
  admin() {
    alert('Администратор');
  }
}

let user2 = {};

user1.admin?.(); // Администратор
user2.admin?.();
/*Сначала используем точку (user1.admin) чтобы получить свойствo admin, потому что обьект пользователя точно существует и к нему можно обратиться,
Затем уже выполняем ?()., для проверки левой части если админ существует то итогом будет выведено "Администратор", это для user1, для user2 вычисление остановится без ошибок */


//?.[]
let user3 = {
  firstName: 'Артем'
};

let user4 = null;

let key = 'firstName';

alert(user3?.[key]);   // Артем 
alert(user4?.[key]);   // undefined 



//Также можно использовать вместе с delete

delete user2?.admin // удалит user2.admin если он существует


// ?. Можно использовать для чтения и удаления, но не для записи 
let user = {}

user?.name = 'John' //Не сработает, это тоже самое что и undefined = 'John'


/*ИТОГ
obj?.prop – возвращает obj.prop, если существует obj, и undefined в противном случае.
obj?.[prop] – возвращает obj[prop], если существует obj, и undefined в противном случае.
obj.method?.() – вызывает obj.method(), если существует obj.method, в противном случае возвращает undefined.
*/























