//Строки

//Кавычки, одинарные и двойные они одинаковые, а обратные немного другие:
function sum(a, b) {
  return a + b;
};
alert(`1 + 2 = ${sum(1, 2)}`);   //если использовать обратные кавычки, то в такую строку мы сможем вставлять произвольные вырадения ${}.

//Еще одно преимущетсво, они могут занимать более одной строки в отличие от двойных и одинарных
let guestList = `Guests:   
 * Artem
 * Maks`;
alert(guestList) //список гостей


// Спецсимволы, символ перевода строки \n :
let guestList2 = `Guests:
Artem`

let guestList3 = 'Guests:\nArtem'
alert(guestList2 === guestList3)


//Все спецсимволы начинаются с  \, также он нужен если нам необходимо добавить в строку кавычку(\'):
alert('I\'m the Walrus!'); // I'm the Walrus!
alert(`I'm the Walrus!`);  //но будет эстетичнее применить обратные или двойные кавычки
alert('Backslash \\')      //Backslash \, чтобы вывести \, необходимо написать \\


//Длина строки
//str.lenght
alert(`My\n`.length)  //содержит длину строки, в даном случае 3, \n тоже является одним спецсимволом.


//Доступ к символам, получить символ, который занимает позицию pos, можно с помощью квадратных скобок: [pos]. Первый символ занимает нулевую позицию

let str = 'Hello'

alert(str[0]); // H
alert(str.charAt(0)); //H, метод charAt(pos)
//Также можем получить последний символ строки:
alert(str[str.length -1]);
//Также можно перебрать строку посимвольно c помощью for of
for(let char of 'Hello')
alert(char) // H,e,l,l,o


//Изменение регистра
// toLowerCase\toUpperCase

alert('Interface'.toLowerCase()); //interface
alert('Interface'.toUpperCase()); //INTERFACE

alert('Interface'[0].toUpperCase()) //I, если мы захотим перевести в какой-то регистр определенный символ


//Поиск подстроки
// str.indexOf ищет посдтроку substr в строке str, начиная c позиции pos, и возвращает позицию, на которой располагается совпадение, либо -1 при отсутствии совпадений.

let str = 'Widget with id';
alert(str.indexOf('Widget'));   //0, потому что подстрока Widget была найдена в начале 
alert(str.indexOf('widget'));   //-1 строка не была найдена, поиск чувствителен к регистру 
alert(str.indexOf('id'));       //1, потому что подстрока 'id' найдена на позиции 1 (.idget)

//Необязательный второй аргумент позволяет начать поиск с определённой позиции. Для того, чтобы найти следующее, начнём поиск с позиции 2:
alert(str.indexOf('id', 2)); //12


//includes, startsWith, endsWith

//Более современный метод str.includes(substr, pos) возвращает true, если в строке str есть подстрока substr, либо false, если нет.
alert('Widget with id'.includes('Widget')); //true, если нам необходимо проверить есть ли совпадение, но позиция не нужна

alert('Midget'.includes('id', 3)); //false необязательный второй аргумент который позволяет начать поиск с определенной позиции

//str.startsWith, str.endWith проверяют собственно, начинается ли и заканчивается ли строка определенной строкой
alert('Widget'.startsWith('Wid')); //true начинается с Wid
alert('Widget'.endsWith('get'));   //true заканчивается с get


//Получение подстроки
// есть 3 метода получения подстроки: substring, substr, slice 
// str.slice(start [,end]) возвращает часть строки от start до (не включая) end


let str3 = 'stringify';
alert(str3.slice(0, 5)); //strin не включая 5
alert(str3.slice(0, 1));  //s 

alert(str3.slice(2));   //ringify, если end отсутсвует, то вывод будет с позиции 2 и до конца
 
// str.substring(start [, end])
// Если start больше end, то метод substring сработает так, как если бы аргументы были поменяны местами
alert( str3.substring(2, 6) ); // "ring"
alert( str3.substring(6, 2) ); // "ring"


/*
str.substr(start [, lenght]);
Возвращает часть строки от start длины length.
В противоположность предыдущим методам, этот позволяет указать длину вместо конечной позиции*/

alert(str3.substr(2, 4)); // ring, получаем 4 символа, начиная с 2 позиции.


// ИТОГИ
/*
Есть три типа кавычек. Строки, использующие обратные кавычки, могут занимать более одной строки в коде и включать выражения ${…}.
Строки в JavaScript кодируются в UTF-16.
Есть специальные символы, такие как \n, и можно добавить символ по его юникодному коду, используя \u….
Для получения символа используйте [].
Для получения подстроки используйте slice или substring.
Для того, чтобы перевести строку в нижний или верхний регистр, используйте toLowerCase/toUpperCase.
Для поиска подстроки используйте indexOf или includes/startsWith/endsWith, когда надо только проверить, есть ли вхождение.
Чтобы сравнить строки с учётом правил языка, используйте localeCompare.
Строки также имеют ещё кое-какие полезные методы:

str.trim() — убирает пробелы в начале и конце строки.
str.repeat(n) — повторяет строку n раз.
*/







