// Тип данных Symbol. Создаются новые символы с помощью Symbol()

let id = Symbol()     //Создаем новый символ id
let id = Symbol('id') //Создаем символ с описанием(именем) id


//Символы уникальны, если мы создадим множетсво символов с разным описанием, это все равно будут разные символы.

let id2 = Symbol('id');
let id3 = Symbol('id');

alert (id2 == id3) //false

//ЗАПОМНИТЬ. Символы не преобразовуются автоматически строки, если мы хотим вывести символ через alert, то стоит воспользоваться .toString(), либо же .description  :
let id5 = Symbol('id');

alert(id.toString());  // Symbol(id)
alert(id.description); // id



//Скрытые свойтсва. Позволяют создать скрытые свойтсва которые нельзя будет в дальнейшем в другом куске кода перезаписать либо же нечаянно обратиться, Например: 

let user = {          // допустим у нас есть user пренадлежащий стороннему коду, и нам необходимо добавить к нему идентификатор 
  name: 'Артем'
};

let id = Symbol('id');

user[id] = 1;
alert(user[id]);



//Использование символов в литеральном обьекте. Если мы хотим использовать символ в литеральном обьекте {..} то нам необходими его заключить в []:
let id = Symbol("id");

let user = {
  name: "Артемий",
  [id]: 123 // просто "id: 123" не сработает
};





//Символы игнорируются циклом for...in

let id = Symbol('id')
let user10 = {
  name: 'Артемис',
  age: 30,
  [id]: 228,
};

for (let key in user10) alert(key); //Итог name, age, свойства с ключом-символом нету среди перечисленных


//Поведение с Object.assign, в отличие от for..in, Object.assign() копирует и строковые, и символьные свойтсва 

let id = Symbol('id');
let user20 = {
  [id]: 123
};
let clone = Object.assign({}, user20);
alert(clone[id]);



/*Глобальные символы. Все символы уникальны, но иногда необходимо чтобы символы с одинаковыми именами были одной сущностью, для этого существует 

Symbol.for(key) - он проверяет глобальный реестр и при наличии в нем key возвращает его, если данного символа не обнаружено он создает новый символ Symbol(key), Например: */

let id = Symbol.for('id');          // читаем символ из глобального реестра, и записываем новый, если символа нет, будет создан новый

let idAgain = Symbol.for('id');     // читаем его еще раз и записываем в переменную. 

alert(id == idAgain); //true


//Symbol.keyFor() в отличие от Symbol.for() он наоборот принимает глобальный символ и возвращает его имя.

//Получаем символ по имени
let id200 = Symbol.for('id');
let id201 = Symbol.for('name');

//Получаем имя по символу 
alert(Symbol.keyFor(id200));  //id
alert(Symbol.keyFor(id201));  //name


//Эти два метода можно использовать только для глобального реестра, Пример:

let id300 = Symbol.for('id');  //глобальный
let id301 = Symbol('name');    //неглобальный

alert(Symbol.keyFor(id300));  //id
alert(Symbol.keyFor(id301));  //undefined для неглобального символа 

alert(id301.description)   //name